//---------------------------------------------------------------------------
#pragma once
#ifndef Unit3H
#define Unit3H
#include "Unit2.h"
//---------------------------------------------------------------------------
#endif
struct node // структура для представления узлов дерева
{
	int key;
	unsigned char height;
	node* left;
	node* right;
	node(int k) { key = k; left = right = 0; height = 1; }
};
class Tree //: public Auto_ptr<T>
{

	public:
	AnsiString S;
    Auto_ptr2<node> root2;
	node* root;
	void treeprintInf(node* root);
	void treeprintPost(node *tree);
	unsigned char height(node* p);
	int bfactor(node* p);
	void fixheight(node* p);
	node* rotateright(node* p); // правый поворот вокруг p
	node* rotateleft(node* q); // левый поворот вокруг q
	node* insert(node* p, int k); // вставка ключа k в дерево с корнем p
	node* findmin(node* p); // поиск узла с минимальным ключом в дереве p
	node* removemin(node* p); // удаление узла с минимальным ключом из дерева p
	node* remove(node* p, int k); // удаление ключа k из дерева p
	node* balance(node* p); // балансировка узла p
};
void Tree::treeprintPost(node *tree) {
	  if (tree!=NULL) { //Пока не встретится пустой узел
		treeprintPost(tree->left); //Рекурсивная функция для левого поддерева
		treeprintPost(tree->right); //Рекурсивная функция для правого поддерева
			S += IntToStr(tree->key);
			S += ", ";
	  }
}
void Tree::treeprintInf(node* root)
{
	node* tmp = root;
	if (tmp!=NULL)
	{ //Пока не встретится пустой узел
		treeprintInf(tmp->left); //Рекурсивная функция для левого поддерева
		S += IntToStr(tmp->key);
		S += ", ";
		treeprintInf(tmp->right); //Рекурсивная функция для правого поддерева
	}

}
unsigned char Tree::height(node* p)
{
	return p?p->height:0;
}

int Tree::bfactor(node* p)
{
	return height(p->right)-height(p->left);
}

void Tree::fixheight(node* p)
{
	unsigned char hl = height(p->left);
	unsigned char hr = height(p->right);
	p->height = (hl>hr?hl:hr)+1;
}

node* Tree::rotateright(node* p) // правый поворот вокруг p
{
	node* q = p->left;
	p->left = q->right;
	q->right = p;
	fixheight(p);
	fixheight(q);
	return q;
}

node* Tree::rotateleft(node* q) // левый поворот вокруг q
{
	node* p = q->right;
	q->right = p->left;
	p->left = q;
	fixheight(q);
	fixheight(p);
	return p;
}

node* Tree::balance(node* p) // балансировка узла p
{
	fixheight(p);
	if( bfactor(p)==2 )
	{
		if( bfactor(p->right) < 0 )
			p->right = rotateright(p->right);
		return rotateleft(p);
	}
	if( bfactor(p)==-2 )
	{
		if( bfactor(p->left) > 0  )
			p->left = rotateleft(p->left);
		return rotateright(p);
	}
	return p; // балансировка не нужна
}

node* Tree::insert(node* p, int k) // вставка ключа k в дерево с корнем p
{
	if( !p ) return new node(k);
	if( k < p->key )
		p->left = insert(p->left,k);
	else
		p->right = insert(p->right,k);
	return balance(p);
}

node* Tree::findmin(node* p) // поиск узла с минимальным ключом в дереве p
{
	return p->left?findmin(p->left):p;
}

node* Tree::removemin(node* p) // удаление узла с минимальным ключом из дерева p
{
	if( p->left == 0 )
		return p->right;
	p->left = removemin(p->left);
	return balance(p);
}

node* Tree::remove(node* p, int k) // удаление ключа k из дерева p
{
	if( !p ) return 0;
	if( k < p->key )
		p->left = remove(p->left,k);
	else if( k > p->key )
		p->right = remove(p->right,k);
	else //  k == p->key
	{
		node* q = p->left;
		node* r = p->right;
		delete p;
		if( !r ) return q;
		node* min = findmin(r);
		min->right = removemin(r);
		min->left = q;
		return balance(min);
	}
	return balance(p);
}