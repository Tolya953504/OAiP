//---------------------------------------------------------------------------
#pragma once
#include <vcl.h>
#ifndef Unit2H
#define Unit2H
//---------------------------------------------------------------------------
#endif
struct node // структура для представления узлов дерева
{
	int key;
	AnsiString str;
	unsigned char height;
	node* left;
	node* right;
	node(int k, AnsiString str1) { key = k; left = right = 0; height = 1; str = str1;}
};
class Tree
{
	public:
	node* root;
    void NumberOfNodes(node* root);
	void Search(node* root, int key); //Поиск элементы
	void Output1q(node* root,TTreeNode *item);   //Вывод информации для TTreeView
	void Free(node *&root);      //Очистка дерева
	void treeprintInf(node* root);  //Инфиксная форма
	void treeprintPost(node *tree);  //Постинфиксная форма
	void treeprintPre(node *tree); //Преинфиксная форма
	unsigned char height(node* p);      //Предоставление информации о высоте
	int bfactor(node* p);    //Фактор, который влияет на способ балансировки дерева
	void fixheight(node* p);    //Информация о высоте дерева (учёт)
	node* rotateright(node* p); // правый поворот вокруг p
	node* rotateleft(node* q); // левый поворот вокруг q
	node* insert(node* p, int k, AnsiString str); // вставка ключа k в дерево с корнем p
	node* findmin(node* p); // поиск узла с минимальным ключом в дереве p
	node* removemin(node* p); // удаление узла с минимальным ключом из дерева p
	node* remove(node* p, int k); // удаление ключа k из дерева p
	node* balance(node* p); // балансировка узла p
};


