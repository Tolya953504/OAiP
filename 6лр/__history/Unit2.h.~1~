//---------------------------------------------------------------------------
#pragma once
#ifndef Unit2H
#define Unit2H
//---------------------------------------------------------------------------
#endif
template<class T>
class Auto_ptr2
{
	T* m_ptr;
public:
	Auto_ptr2(T* ptr=nullptr)
		:m_ptr(ptr)
	{
	}

	~Auto_ptr2()
	{
		delete m_ptr;
	}

	// Конструктор копирования, который реализовывает семантику перемещения
	Auto_ptr2(Auto_ptr2& a) // примечание: ссылка не является константной
	{
		m_ptr = a.m_ptr; // перемещаем наш глупый указатель от источника к нашему локальному объекту
		a.m_ptr = nullptr; // убеждаемся, что источник больше не владеет указателем
	}

	// Оператор присваивания, который реализовывает семантику перемещения
	Auto_ptr2& operator=(Auto_ptr2& a) // примечание: ссылка не является константной
	{
		if (&a == this)
			return *this;

		delete m_ptr; // убеждаемся, что удалили любой указатель, который наш локальный объект имел до этого
		m_ptr = a.m_ptr; // затем перемещаем наш глупый указатель из источника к нашему локальному объекту
		a.m_ptr = nullptr; // убеждаемся, что источник больше не владеет указателем
		return *this;
	}

	T& operator*() const { return *m_ptr; }
	T* operator->() const { return m_ptr; }
	bool isNull() const { return m_ptr == nullptr;  }
};

/*class Item
{
public:
	Item() { std::cout << "Item acquired\n"; }
	~Item() { std::cout << "Item destroyed\n"; }
};                         */